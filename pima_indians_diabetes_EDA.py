# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 15:00:14 2019

https://www.kaggle.com/shrutimechlearn/step-by-step-diabetes-classification-knn-detailed
https://www.kaggle.com/lampubhutia/pima-diabetes-logisticregression

https://www.kaggle.com/shrutimechlearn/statistical-learning-tutorial-updates



@author: vdokku
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#plt.style.use('ggplot')
#ggplot is R based visualisation package that provides better graphics with higher level of abstraction


"""
https://www.kaggle.com/shrutimechlearn/step-by-step-diabetes-classification-knn-detailed



OSEMN Pipeline

    O - Obtaining our data
    S - Scrubbing / Cleaning our data
    E - Exploring / Visualizing our data will allow us to find patterns and trends
    M - Modeling our data will give us our predictive power as a wizard
    N - INterpreting our data

"""
diabetes_data = pd.read_csv('diabetes.csv')

diabetes_data.head()

diabetes_data.shape

diabetes_data.info(verbose=True)

"""



DataFrame.describe() method generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset’s distribution, excluding NaN values. This method tells us a lot of things about a dataset. One important thing is that the describe() method deals only with numeric values. It doesn't work with any categorical values. So if there are any categorical values in a column the describe() method will ignore it and display summary for the other columns unless parameter include="all" is passed.

Now, let's understand the statistics that are generated by the describe() method:

    count tells us the number of NoN-empty rows in a feature.
    mean tells us the mean value of that feature.
    std tells us the Standard Deviation Value of that feature.
    min tells us the minimum value of that feature.
    25%, 50%, and 75% are the percentile/quartile of each features. This quartile information helps us to detect Outliers.
    max tells us the maximum value of that feature.


"""


diabetes_data.describe()


diabetes_data.describe().T
# Describe & Describe with T is almost the same. 



"""
It is better to replace zeros with nan since after that counting them would be easier and zeros need to be replaced with suitable values¶
"""

diabetes_data_1 = diabetes_data.copy(deep = True)
diabetes_data_1[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data_1[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)

## showing the count of Nans
print(diabetes_data_1.isnull().sum())

p = diabetes_data.hist(figsize = (20,20))


"""


Aiming to impute nan values for the columns in accordance with their distribution¶


"""

